runif?
```
help(runif)
set.seed(10)
z <- set.seed(10)
z
set.seed(10)
getwd()
read.csv(airquality)
read.csv(airquality.csv)
read.csv('airquality.csv')
#load package
library(ggplot2)
library(gvlma)
#load data
data(CarMileageData)
#fit a very simple linear regression model
# "~" means as a function of...
# response ~ predictor
model1<-lm(NumGallons~MilesLastFill,data=CarMileageData)
summary(model1)
#visualize it
ggplot(data=CarMileageData,aes(x=MilesLastFill,y=NumGallons))+
geom_point()+geom_smooth(method="lm")
#did we meet all of the assumptions?
gvlma_out <- gvlma(model1)
gvlma_out
plot(gvlma_out)
getwd()
#from laptop
setwd("C:/Users/justi/OneDrive - Texas A&M University/research/TAMU_urban_trees_OD/R_WD2")
wd <- getwd()
wd
#from laptop
setwd("C:/Users/justi/OneDrive - Texas A&M University/research/TAMU_urban_trees_OD/R_WD2")
wd <- getwd()
wd
wd
# create output folder in cwd
dir_out <- paste(wd, '/output', sep = '')
ifelse(!dir.exists(file.path(dir_out)), dir.create(file.path(dir_out)), FALSE)
setwd(dir_out)
getwd()
dir_input <- '../_input'
list.files(dir_input)
list.files(dir_input, pattern = "\\.las$")
list.files(dir_input, pattern = "\\.tif$")
las_in <- "_2022_07_21_AGL_merge_CHM_50cm_points_table_TOC.las"
chm_in <- "2022-07-21_AGL_merge_CHM_50cm.tif"
library(lidR)
# las_in <- "_2022_07_21_AGL_merge_CHM_50cm_points_table_TOC.las"
las <- readLAS(paste(dir_input, '/', las_in, sep = ''))
summary(las)
plot(las)
knitr::opts_chunk$set(echo = TRUE)
getwd()
dir_input <- 'C:/Users/justi/OneDrive - Texas A&M University/Academics/ECCB 407 - Prog Sp Data/final project/_input'
list.files(dir_input)
las <- readLAS(paste(dir_input, '/', las_in, sep = ''))
summary(las)
library(lidR)
library(raster)
library(sf)
library(ggplot2)
library(ggpmisc)
library(dplyr)
library(terra)
library(mapview)
library(lidR)
library(raster)
library(sf)
library(ggplot2)
library(ggpmisc)
library(dplyr)
library(terra)
library(mapview)
getwd()
setwd("C:/Users/justi/OneDrive - Texas A&M University/research/TAMU_urban_trees_OD/__prop_thesis/sample_code/RMD1")
getwd()
dir_input <- 'C:/Users/justi/OneDrive - Texas A&M University/research/TAMU_urban_trees_OD/__prop_thesis/sample_code/RMD1/_input'
list.files(dir_input)
library(lidR)
library(raster)
library(sf)
library(ggplot2)
library(ggpmisc)
library(dplyr)
library(terra)
library(mapview)
getwd()
setwd("C:/Users/justi/OneDrive - Texas A&M University/research/TAMU_urban_trees_OD/__prop_thesis/sample_code/RMD1")
getwd()
setwd("C:/Users/justi/OneDrive - Texas A&M University/research/TAMU_urban_trees_OD/__prop_thesis/sample_code/RMD1")
getwd()
# dir_input <- 'C:/Users/justi/OneDrive - Texas A&M University/research/TAMU_urban_trees_OD/__prop_thesis/sample_code/RMD1/_input'
dir_input <- './_input'
list.files(dir_input)
# dir_input <- 'C:/Users/justi/OneDrive - Texas A&M University/research/TAMU_urban_trees_OD/__prop_thesis/sample_code/RMD1/_input'
dir_input <- './_input'
list.files(dir_input)
dir_out <- paste(wd, '/output', sep = '')
ifelse(!dir.exists(file.path(dir_out)), dir.create(file.path(dir_out)), FALSE)
setwd(dir_out)
getwd()
setwd("C:/Users/justi/OneDrive - Texas A&M University/research/TAMU_urban_trees_OD/__prop_thesis/sample_code/RMD1")
wd <- getwd()
wd
dir_out <- paste(wd, '/output', sep = '')
ifelse(!dir.exists(file.path(dir_out)), dir.create(file.path(dir_out)), FALSE)
setwd(dir_out)
getwd()
dir_out <- paste(wd, '/output', sep = '')
ifelse(!dir.exists(file.path(dir_out)), dir.create(file.path(dir_out)), FALSE)
setwd(dir_out)
getwd()
getwd()
setwd("C:/Users/justi/OneDrive - Texas A&M University/research/TAMU_urban_trees_OD/__prop_thesis/sample_code/RMD1")
wd <- getwd()
wd
setwd("C:/Users/justi/OneDrive - Texas A&M University/research/TAMU_urban_trees_OD/__prop_thesis/sample_code/RMD1/output")
wd <- getwd()
wd
setwd("C:/Users/justi/OneDrive - Texas A&M University/research/TAMU_urban_trees_OD/__prop_thesis/sample_code/RMD1")
wd <- getwd()
wd
wd <- getwd()
wd
dir_input <- './_input'
list.files(dir_input)
las_in <- "_2022_07_21_AGL_merge_CHM_50cm_points_table_TOC.las"
chm_in <- "2022-07-21_AGL_merge_CHM_50cm.tif"
dir_out <- paste(wd, '/output', sep = '')
ifelse(!dir.exists(file.path(dir_out)), dir.create(file.path(dir_out)), FALSE)
dir_out <- paste(wd, '/output', sep = '')
ifelse(!dir.exists(file.path(dir_out)), dir.create(file.path(dir_out)), FALSE)
las <- readLAS(paste(dir_input, '/', las_in, sep = ''))
summary(las)
chm1 <- raster(paste(dir_input, '/', chm_in, sep = ''))
chm1
chm_rast <- rast(chm1)
plot(chm_rast)
slope = 1.15
inter = -0.58
ggplot(data=data.frame( x=c(-1,10),y=c(-1,10) ), aes(x=x,y=y)) +
geom_blank() +
geom_abline(slope=slope, intercept=inter, col="red", linewidth=2) +
geom_abline(slope=slope, intercept=0, col="blue", linewidth=1) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
labs(title = 'Tree height compared to crown width',
x = 'Tree Height (m)', y = 'Crown Width (m^2)')
ggplot(data=data.frame( x=c(-1,10),y=c(-1,10) ), aes(x=x,y=y)) +
geom_blank() +
geom_abline(aes(slope=slope, intercept=inter, col="red", linewidth=2)) +
geom_abline(slope=slope, intercept=0, col="blue", linewidth=1) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
labs(title = 'Tree height compared to crown width',
x = 'Tree Height (m)', y = 'Crown Width (m^2)')
ggplot(data=data.frame( x=c(-1,10),y=c(-1,10) ), aes(x=x,y=y)) +
geom_blank() +
geom_abline(aes(slope=slope, intercept=inter, col="red", linewidth=2)) +
geom_abline(aes(slope=slope, intercept=0, col="blue", linewidth=1)) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
labs(title = 'Tree height compared to crown width',
x = 'Tree Height (m)', y = 'Crown Width (m^2)')
ggplot(data=data.frame( x=c(-1,10),y=c(-1,10) ), aes(x=x,y=y)) +
geom_blank() +
geom_abline(slope=slope, intercept=inter, col="red", linewidth=2) +
geom_abline(slope=slope, intercept=0, col="blue", linewidth=1) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
labs(title = 'Tree height compared to crown width',
x = 'Tree Height (m)', y = 'Crown Width (m^2)')
f1 <- function(x) {x * slope + .01}
ttops1 <- locate_trees(las, lmf(ws = f1,
hmin = 4,
shape = c("circular")))
seg1 <- segment_trees(
las, dalponte2016(chm1, ttops1,
th_tree = 3.5, # Threshold below which a pixel cannot be a tree. Default is 2.
th_seed = 0.45, # Growing threshold 1, should be between 0 and 1, default is 0.45.
th_cr = 0.55, # Growing threshold 2, should be between 0 and 1, default is 0.55.
max_cr = 20, # Maximum value of crown diameter (in pixels), default is 10.
ID = "treeID"))
crowns1 <- crown_metrics(seg1, .stdtreemetrics, geom = "convex")
mapview(list(ttops1, crowns1))
tt_hist <- ggplot(ttops1, aes(Z)) +
geom_histogram(binwidth = 0.5) +
labs(title = 'Histogram of tree heights', x = 'Tree Height (m)')
tt_hist
cw_hist <- ggplot(crowns1, aes(convhull_area)) +
geom_histogram(binwidth = 10) +
labs(title = 'Histogram of crown widths', x = 'Crown Width (m^2)')
cw_hist
scatter <- ggplot(crowns1, aes(x=Z, y=convhull_area)) +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2", "n"))) +
geom_point() +
labs(title = 'Scatter plot of tree heights and crown widths',
x = 'Tree Height (m)', y = 'Crown Width (m^2)')
scatter
scatter <- ggplot(crowns1, aes(x=Z, y=convhull_area)) +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2", "n"))) +
geom_point() +
labs(title = 'Scatter plot of tree heights and crown widths',
x = 'Tree Height (m)', y = 'Crown Area (m^2)')
scatter
scatter <- ggplot(crowns1, aes(x=Z, y=convhull_area)) +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2", "n"))) +
geom_point() +
labs(title = 'Scatter plot of tree heights and crown areas',
x = 'Tree Height (m)', y = 'Crown Area (m^2)')
scatter
setwd(dir_out)
getwd()
setwd(dir_out)
st_write((st_zm(ttops1, drop = T, what = "ZM")), "ttops1noz.shp")
st_write(crowns1, "crowns1.shp")
setwd(dir_out)
st_write((st_zm(ttops1, drop = T, what = "ZM")), "ttops1.shp")
st_write(crowns1, "crowns1.shp")
setwd(dir_out)
st_write((st_zm(ttops1, drop = T, what = "ZM")), "ttops1.shp", append = F)
st_write(crowns1, "crowns1.shp", append = F)
las <- readLAS(paste(dir_input, '/', las_in, sep = ''))
summary(las)
slope = 1.15
inter = -0.58
ggplot(data=data.frame( x=c(-1,10),y=c(-1,10) ), aes(x=x,y=y)) +
geom_blank() +
geom_abline(slope=slope, intercept=inter, col="red", linewidth=2) +
geom_abline(slope=slope, intercept=0, col="blue", linewidth=1) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
labs(title = 'Tree height compared to crown width',
x = 'Tree Height (m)', y = 'Crown Width (m)')
knitr::opts_chunk$set(echo = TRUE)
wd <- getwd()
wd
library(lidR)
library(raster)
library(sf)
library(ggplot2)
library(ggpmisc)
library(dplyr)
library(terra)
library(mapview)
dir_input <- './_input'
list.files(dir_input)
unlink("RMD1_cache", recursive = TRUE)
library(xfun)
install.packages("xfun")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(lidR)
library(raster)
library(sf)
library(ggplot2)
library(ggpmisc)
knitr::opts_chunk$set(echo = TRUE)
library(lidR)
library(raster)
library(sf)
library(ggplot2)
library(ggpmisc)
library(ggpp)
library(vctrs)
library(lidR)
library(raster)
library(sf)
library(ggplot2)
library(ggpmisc)
detach("package:ggpp", unload = TRUE)
library(ggpp)
install.packages(c("backports", "brew", "brio", "broom", "cachem", "callr", "checkmate", "cli", "commonmark", "CoordinateCleaner", "cpp11", "credentials", "crul", "curl", "dbplyr", "desc", "digest", "dotCall64", "downlit", "farver", "fastmap", "fs", "gert", "ggfortify", "ggplot2", "ggpmisc", "ggpp", "gh", "glue", "goeveg", "gtable", "haven", "Hmisc", "htmlTable", "htmltools", "httpuv", "httr2", "labeling", "later", "liver", "lme4", "lwgeom", "maps", "markdown", "MatrixModels", "minqa", "munsell", "mvtnorm", "PBSmapping", "pkgbuild", "pkgdown", "pkgload", "plyr", "prettyunits", "processx", "progress", "PROJ", "proj4", "promises", "ps", "purrr", "quantreg", "ragg", "Rcpp", "readr", "rematch", "remotes", "reprex", "reproj", "rgbif", "rlang", "rnaturalearth", "roxygen2", "rprojroot", "rstudioapi", "rvest", "scales", "shiny", "spam", "SparseM", "stringi", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "usethis", "uuid", "vctrs", "vegan", "viridis", "vroom", "waldo", "xml2", "xopen", "xts", "yaml", "zip"))
install.packages(c("backports", "brew", "brio", "broom", "cachem", "callr", "checkmate", "cli", "commonmark", "CoordinateCleaner", "cpp11", "credentials", "crul", "curl", "dbplyr", "desc", "digest", "dotCall64", "downlit", "farver", "fastmap", "fs", "gert", "ggfortify", "ggplot2", "ggpmisc", "ggpp", "gh", "glue", "goeveg", "gtable", "haven", "Hmisc", "htmlTable", "htmltools", "httpuv", "httr2", "labeling", "later", "liver", "lme4", "lwgeom", "maps", "markdown", "MatrixModels", "minqa", "munsell", "mvtnorm", "PBSmapping", "pkgbuild", "pkgdown", "pkgload", "plyr", "prettyunits", "processx", "progress", "PROJ", "proj4", "promises", "ps", "purrr", "quantreg", "ragg", "Rcpp", "readr", "rematch", "remotes", "reprex", "reproj", "rgbif", "rlang", "rnaturalearth", "roxygen2", "rprojroot", "rstudioapi", "rvest", "scales", "shiny", "spam", "SparseM", "stringi", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "usethis", "uuid", "vctrs", "vegan", "viridis", "vroom", "waldo", "xml2", "xopen", "xts", "yaml", "zip"))
install.packages(c("backports", "brew", "brio", "broom", "cachem", "callr", "checkmate", "cli", "commonmark", "CoordinateCleaner", "cpp11", "credentials", "crul", "curl", "dbplyr", "desc", "digest", "dotCall64", "downlit", "farver", "fastmap", "fs", "gert", "ggfortify", "ggplot2", "ggpmisc", "ggpp", "gh", "glue", "goeveg", "gtable", "haven", "Hmisc", "htmlTable", "htmltools", "httpuv", "httr2", "labeling", "later", "liver", "lme4", "lwgeom", "maps", "markdown", "MatrixModels", "minqa", "munsell", "mvtnorm", "PBSmapping", "pkgbuild", "pkgdown", "pkgload", "plyr", "prettyunits", "processx", "progress", "PROJ", "proj4", "promises", "ps", "purrr", "quantreg", "ragg", "Rcpp", "readr", "rematch", "remotes", "reprex", "reproj", "rgbif", "rlang", "rnaturalearth", "roxygen2", "rprojroot", "rstudioapi", "rvest", "scales", "shiny", "spam", "SparseM", "stringi", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "usethis", "uuid", "vctrs", "vegan", "viridis", "vroom", "waldo", "xml2", "xopen", "xts", "yaml", "zip"))
install.packages(c("backports", "brew", "brio", "broom", "cachem", "callr", "checkmate", "cli", "commonmark", "CoordinateCleaner", "cpp11", "credentials", "crul", "curl", "dbplyr", "desc", "digest", "dotCall64", "downlit", "farver", "fastmap", "fs", "gert", "ggfortify", "ggplot2", "ggpmisc", "ggpp", "gh", "glue", "goeveg", "gtable", "haven", "Hmisc", "htmlTable", "htmltools", "httpuv", "httr2", "labeling", "later", "liver", "lme4", "lwgeom", "maps", "markdown", "MatrixModels", "minqa", "munsell", "mvtnorm", "PBSmapping", "pkgbuild", "pkgdown", "pkgload", "plyr", "prettyunits", "processx", "progress", "PROJ", "proj4", "promises", "ps", "purrr", "quantreg", "ragg", "Rcpp", "readr", "rematch", "remotes", "reprex", "reproj", "rgbif", "rlang", "rnaturalearth", "roxygen2", "rprojroot", "rstudioapi", "rvest", "scales", "shiny", "spam", "SparseM", "stringi", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "usethis", "uuid", "vctrs", "vegan", "viridis", "vroom", "waldo", "xml2", "xopen", "xts", "yaml", "zip"))
install.packages(c("backports", "brew", "brio", "broom", "cachem", "callr", "checkmate", "cli", "commonmark", "CoordinateCleaner", "cpp11", "credentials", "crul", "curl", "dbplyr", "desc", "digest", "dotCall64", "downlit", "farver", "fastmap", "fs", "gert", "ggfortify", "ggplot2", "ggpmisc", "ggpp", "gh", "glue", "goeveg", "gtable", "haven", "Hmisc", "htmlTable", "htmltools", "httpuv", "httr2", "labeling", "later", "liver", "lme4", "lwgeom", "maps", "markdown", "MatrixModels", "minqa", "munsell", "mvtnorm", "PBSmapping", "pkgbuild", "pkgdown", "pkgload", "plyr", "prettyunits", "processx", "progress", "PROJ", "proj4", "promises", "ps", "purrr", "quantreg", "ragg", "Rcpp", "readr", "rematch", "remotes", "reprex", "reproj", "rgbif", "rlang", "rnaturalearth", "roxygen2", "rprojroot", "rstudioapi", "rvest", "scales", "shiny", "spam", "SparseM", "stringi", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "usethis", "uuid", "vctrs", "vegan", "viridis", "vroom", "waldo", "xml2", "xopen", "xts", "yaml", "zip"))
install.packages(c("backports", "brew", "brio", "broom", "cachem", "callr", "checkmate", "cli", "commonmark", "CoordinateCleaner", "cpp11", "credentials", "crul", "curl", "dbplyr", "desc", "digest", "dotCall64", "downlit", "farver", "fastmap", "fs", "gert", "ggfortify", "ggplot2", "ggpmisc", "ggpp", "gh", "glue", "goeveg", "gtable", "haven", "Hmisc", "htmlTable", "htmltools", "httpuv", "httr2", "labeling", "later", "liver", "lme4", "lwgeom", "maps", "markdown", "MatrixModels", "minqa", "munsell", "mvtnorm", "PBSmapping", "pkgbuild", "pkgdown", "pkgload", "plyr", "prettyunits", "processx", "progress", "PROJ", "proj4", "promises", "ps", "purrr", "quantreg", "ragg", "Rcpp", "readr", "rematch", "remotes", "reprex", "reproj", "rgbif", "rlang", "rnaturalearth", "roxygen2", "rprojroot", "rstudioapi", "rvest", "scales", "shiny", "spam", "SparseM", "stringi", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "usethis", "uuid", "vctrs", "vegan", "viridis", "vroom", "waldo", "xml2", "xopen", "xts", "yaml", "zip"))
install.packages(c("backports", "brew", "brio", "broom", "cachem", "callr", "checkmate", "cli", "commonmark", "CoordinateCleaner", "cpp11", "credentials", "crul", "curl", "dbplyr", "desc", "digest", "dotCall64", "downlit", "farver", "fastmap", "fs", "gert", "ggfortify", "ggplot2", "ggpmisc", "ggpp", "gh", "glue", "goeveg", "gtable", "haven", "Hmisc", "htmlTable", "htmltools", "httpuv", "httr2", "labeling", "later", "liver", "lme4", "lwgeom", "maps", "markdown", "MatrixModels", "minqa", "munsell", "mvtnorm", "PBSmapping", "pkgbuild", "pkgdown", "pkgload", "plyr", "prettyunits", "processx", "progress", "PROJ", "proj4", "promises", "ps", "purrr", "quantreg", "ragg", "Rcpp", "readr", "rematch", "remotes", "reprex", "reproj", "rgbif", "rlang", "rnaturalearth", "roxygen2", "rprojroot", "rstudioapi", "rvest", "scales", "shiny", "spam", "SparseM", "stringi", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "usethis", "uuid", "vctrs", "vegan", "viridis", "vroom", "waldo", "xml2", "xopen", "xts", "yaml", "zip"))
install.packages(c("backports", "brew", "brio", "broom", "cachem", "callr", "checkmate", "cli", "commonmark", "CoordinateCleaner", "cpp11", "credentials", "crul", "curl", "dbplyr", "desc", "digest", "dotCall64", "downlit", "farver", "fastmap", "fs", "gert", "ggfortify", "ggplot2", "ggpmisc", "ggpp", "gh", "glue", "goeveg", "gtable", "haven", "Hmisc", "htmlTable", "htmltools", "httpuv", "httr2", "labeling", "later", "liver", "lme4", "lwgeom", "maps", "markdown", "MatrixModels", "minqa", "munsell", "mvtnorm", "PBSmapping", "pkgbuild", "pkgdown", "pkgload", "plyr", "prettyunits", "processx", "progress", "PROJ", "proj4", "promises", "ps", "purrr", "quantreg", "ragg", "Rcpp", "readr", "rematch", "remotes", "reprex", "reproj", "rgbif", "rlang", "rnaturalearth", "roxygen2", "rprojroot", "rstudioapi", "rvest", "scales", "shiny", "spam", "SparseM", "stringi", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "usethis", "uuid", "vctrs", "vegan", "viridis", "vroom", "waldo", "xml2", "xopen", "xts", "yaml", "zip"))
install.packages(c("backports", "brew", "brio", "broom", "cachem", "callr", "checkmate", "cli", "commonmark", "CoordinateCleaner", "cpp11", "credentials", "crul", "curl", "dbplyr", "desc", "digest", "dotCall64", "downlit", "farver", "fastmap", "fs", "gert", "ggfortify", "ggplot2", "ggpmisc", "ggpp", "gh", "glue", "goeveg", "gtable", "haven", "Hmisc", "htmlTable", "htmltools", "httpuv", "httr2", "labeling", "later", "liver", "lme4", "lwgeom", "maps", "markdown", "MatrixModels", "minqa", "munsell", "mvtnorm", "PBSmapping", "pkgbuild", "pkgdown", "pkgload", "plyr", "prettyunits", "processx", "progress", "PROJ", "proj4", "promises", "ps", "purrr", "quantreg", "ragg", "Rcpp", "readr", "rematch", "remotes", "reprex", "reproj", "rgbif", "rlang", "rnaturalearth", "roxygen2", "rprojroot", "rstudioapi", "rvest", "scales", "shiny", "spam", "SparseM", "stringi", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "usethis", "uuid", "vctrs", "vegan", "viridis", "vroom", "waldo", "xml2", "xopen", "xts", "yaml", "zip"))
knitr::opts_chunk$set(echo = TRUE)
library(lidR)
library(raster)
library(sf)
library(ggplot2)
library(ggpmisc)
install.packages(c("cli", "digest", "downlit", "fastmap", "htmltools", "rlang"))
install.packages("htmltools")
install.packages("htmltools")
knitr::opts_chunk$set(echo = TRUE)
library(lidR)
# library(raster)
# library(sf)
library(ggplot2)
# library(ggpmisc)
# library(dplyr)
# library(terra)
library(mapview)
wd <- getwd()
wd
dir_input <- './_input'
list.files(dir_input)
las_in <- "lidar_point_cloud.las"
chm_in <- "CHM_50cm.tif"
dir_out <- paste(wd, '/output', sep = '')
ifelse(!dir.exists(file.path(dir_out)), dir.create(file.path(dir_out)), FALSE)
las <- readLAS(paste(dir_input, '/', las_in, sep = ''))
summary(las)
chm1 <- raster(paste(dir_input, '/', chm_in, sep = ''))
knitr::opts_chunk$set(echo = TRUE)
library(lidR)
library(raster)
# library(sf)
library(ggplot2)
# library(ggpmisc)
# library(dplyr)
# library(terra)
library(mapview)
wd <- getwd()
wd
dir_input <- './_input'
list.files(dir_input)
las_in <- "lidar_point_cloud.las"
chm_in <- "CHM_50cm.tif"
dir_out <- paste(wd, '/output', sep = '')
ifelse(!dir.exists(file.path(dir_out)), dir.create(file.path(dir_out)), FALSE)
las <- readLAS(paste(dir_input, '/', las_in, sep = ''))
summary(las)
chm1 <- raster(paste(dir_input, '/', chm_in, sep = ''))
chm1
chm_rast <- rast(chm1)
?rast
knitr::opts_chunk$set(echo = TRUE)
library(lidR)
library(raster)
# library(sf)
library(ggplot2)
# library(ggpmisc)
# library(dplyr)
library(terra)
library(mapview)
wd <- getwd()
wd
dir_input <- './_input'
list.files(dir_input)
las_in <- "lidar_point_cloud.las"
chm_in <- "CHM_50cm.tif"
dir_out <- paste(wd, '/output', sep = '')
ifelse(!dir.exists(file.path(dir_out)), dir.create(file.path(dir_out)), FALSE)
las <- readLAS(paste(dir_input, '/', las_in, sep = ''))
summary(las)
chm1 <- raster(paste(dir_input, '/', chm_in, sep = ''))
chm1
chm_rast <- rast(chm1)
plot(chm_rast)
slope = 1.15
inter = -0.58
ggplot(data=data.frame( x=c(-1,10),y=c(-1,10) ), aes(x=x,y=y)) +
geom_blank() +
geom_abline(slope=slope, intercept=inter, col="red", linewidth=2) +
geom_abline(slope=slope, intercept=0, col="blue", linewidth=1) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
labs(title = 'Tree height compared to crown width',
x = 'Tree Height (m)', y = 'Crown Width (m)')
f1 <- function(x) {x * slope + .01}
ttops1 <- locate_trees(las, lmf(ws = f1,
hmin = 4,
shape = c("circular")))
seg1 <- segment_trees(
las, dalponte2016(chm1, ttops1,
th_tree = 3.5, # Threshold below which a pixel cannot be a tree. Default is 2.
th_seed = 0.45, # Growing threshold 1, should be between 0 and 1, default is 0.45.
th_cr = 0.55, # Growing threshold 2, should be between 0 and 1, default is 0.55.
max_cr = 20, # Maximum value of crown diameter (in pixels), default is 10.
ID = "treeID"))
crowns1 <- crown_metrics(seg1, .stdtreemetrics, geom = "convex")
mapview(list(ttops1, crowns1))
tt_hist <- ggplot(ttops1, aes(Z)) +
geom_histogram(binwidth = 0.5) +
labs(title = 'Histogram of tree heights', x = 'Tree Height (m)')
tt_hist
cw_hist <- ggplot(crowns1, aes(convhull_area)) +
geom_histogram(binwidth = 10) +
labs(title = 'Histogram of crown areas', x = 'Crown Area (m^2)')
cw_hist
setwd(dir_out)
st_write((st_zm(ttops1, drop = T, what = "ZM")), "ttops1.shp", append = F)
?st_write
knitr::opts_chunk$set(echo = TRUE)
library(lidR)
library(raster)
library(sf)
library(ggplot2)
# library(ggpmisc)
# library(dplyr)
library(terra)
library(mapview)
wd <- getwd()
wd
dir_input <- './_input'
list.files(dir_input)
las_in <- "lidar_point_cloud.las"
chm_in <- "CHM_50cm.tif"
dir_out <- paste(wd, '/output', sep = '')
ifelse(!dir.exists(file.path(dir_out)), dir.create(file.path(dir_out)), FALSE)
las <- readLAS(paste(dir_input, '/', las_in, sep = ''))
summary(las)
chm1 <- raster(paste(dir_input, '/', chm_in, sep = ''))
chm1
chm_rast <- rast(chm1)
plot(chm_rast)
slope = 1.15
inter = -0.58
ggplot(data=data.frame( x=c(-1,10),y=c(-1,10) ), aes(x=x,y=y)) +
geom_blank() +
geom_abline(slope=slope, intercept=inter, col="red", linewidth=2) +
geom_abline(slope=slope, intercept=0, col="blue", linewidth=1) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
labs(title = 'Tree height compared to crown width',
x = 'Tree Height (m)', y = 'Crown Width (m)')
f1 <- function(x) {x * slope + .01}
ttops1 <- locate_trees(las, lmf(ws = f1,
hmin = 4,
shape = c("circular")))
seg1 <- segment_trees(
las, dalponte2016(chm1, ttops1,
th_tree = 3.5, # Threshold below which a pixel cannot be a tree. Default is 2.
th_seed = 0.45, # Growing threshold 1, should be between 0 and 1, default is 0.45.
th_cr = 0.55, # Growing threshold 2, should be between 0 and 1, default is 0.55.
max_cr = 20, # Maximum value of crown diameter (in pixels), default is 10.
ID = "treeID"))
crowns1 <- crown_metrics(seg1, .stdtreemetrics, geom = "convex")
mapview(list(ttops1, crowns1))
tt_hist <- ggplot(ttops1, aes(Z)) +
geom_histogram(binwidth = 0.5) +
labs(title = 'Histogram of tree heights', x = 'Tree Height (m)')
tt_hist
cw_hist <- ggplot(crowns1, aes(convhull_area)) +
geom_histogram(binwidth = 10) +
labs(title = 'Histogram of crown areas', x = 'Crown Area (m^2)')
cw_hist
setwd(dir_out)
st_write((st_zm(ttops1, drop = T, what = "ZM")), "ttops1.shp", append = F)
st_write(crowns1, "crowns1.shp", append = F)
knitr::opts_chunk$set(echo = TRUE)
library(lidR)
library(raster)
library(sf)
library(ggplot2)
# library(ggpmisc)
# library(dplyr)
library(terra)
library(mapview)
wd <- getwd()
wd
dir_input <- './_input'
list.files(dir_input)
las_in <- "lidar_point_cloud.las"
chm_in <- "CHM_50cm.tif"
dir_out <- paste(wd, '/output', sep = '')
ifelse(!dir.exists(file.path(dir_out)), dir.create(file.path(dir_out)), FALSE)
las <- readLAS(paste(dir_input, '/', las_in, sep = ''))
summary(las)
chm1 <- raster(paste(dir_input, '/', chm_in, sep = ''))
chm1
chm_rast <- rast(chm1)
plot(chm_rast)
slope = 1.15
inter = -0.58
ggplot(data=data.frame( x=c(-1,10),y=c(-1,10) ), aes(x=x,y=y)) +
geom_blank() +
geom_abline(slope=slope, intercept=inter, col="red", linewidth=2) +
geom_abline(slope=slope, intercept=0, col="blue", linewidth=1) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
labs(title = 'Tree height compared to crown width',
x = 'Tree Height (m)', y = 'Crown Width (m)')
f1 <- function(x) {x * slope + .01}
ttops1 <- locate_trees(las, lmf(ws = f1,
hmin = 4,
shape = c("circular")))
seg1 <- segment_trees(
las, dalponte2016(chm1, ttops1,
th_tree = 3.5, # Threshold below which a pixel cannot be a tree. Default is 2.
th_seed = 0.45, # Growing threshold 1, should be between 0 and 1, default is 0.45.
th_cr = 0.55, # Growing threshold 2, should be between 0 and 1, default is 0.55.
max_cr = 20, # Maximum value of crown diameter (in pixels), default is 10.
ID = "treeID"))
crowns1 <- crown_metrics(seg1, .stdtreemetrics, geom = "convex")
mapview(list(ttops1, crowns1))
tt_hist <- ggplot(ttops1, aes(Z)) +
geom_histogram(binwidth = 0.5) +
labs(title = 'Histogram of tree heights', x = 'Tree Height (m)')
tt_hist
cw_hist <- ggplot(crowns1, aes(convhull_area)) +
geom_histogram(binwidth = 10) +
labs(title = 'Histogram of crown areas', x = 'Crown Area (m^2)')
cw_hist
setwd(dir_out)
st_write((st_zm(ttops1, drop = T, what = "ZM")), "ttops1.shp", append = F)
st_write(crowns1, "crowns1.shp", append = F)
